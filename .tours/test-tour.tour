{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Base TimeLine Editor Walk",
  "steps": [
    {
      "file": "underdogcowboy/core/timeline_editor.py",
      "description": "When starting the timeline editor in the CLI, we need to have a LLM that is going to be used to interact with. \nThe LLMConfigManager is assisting us with this",
      "line": 873
    },
    {
      "file": "underdogcowboy/core/config_manager.py",
      "description": "For example we can use claude as a model. In this case the default model is already a bit behind, 3.5 has been release already for a few months. \nOne of the things we can do for the configmanager is to make a difference between the actual model and the way we are doing it now. We lump things together at the moment, like Antrophic, or Google vertex. There is some ambiugity, and this can be much cleaner in its configuration setup. ",
      "line": 27
    },
    {
      "file": "underdogcowboy/core/timeline_editor.py",
      "description": "Lets take a closer look at the timeline. \nIt keeps track of the dialog history with the llm.",
      "line": 32
    },
    {
      "file": "underdogcowboy/core/timeline_editor.py",
      "description": "and we can save the dialog we have to a local json file",
      "line": 174
    },
    {
      "file": "underdogcowboy/core/timeline_editor.py",
      "description": "Which after stored we can load back into the runtime for ongoing dialog",
      "line": 219
    },
    {
      "file": "underdogcowboy/core/timeline_editor.py",
      "description": "We want to work with the timeline via a command processor. This is a sort of controller, wrapper around the timeline, that can take commands from the user via the cli.",
      "line": 880
    }
  ]
}
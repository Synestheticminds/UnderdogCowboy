diff --git a/underdogcowboy/core/extractor.py b/underdogcowboy/core/extractor.py
index 3d4e512..c95cb7d 100644
--- a/underdogcowboy/core/extractor.py
+++ b/underdogcowboy/core/extractor.py
@@ -1,30 +1,83 @@
 import json
-from typing import Any, Dict, List, Tuple, Union
 
 class JSONExtractor:
-    def __init__(self, text: str, expected_keys: List[str]) -> None:
+    def __init__(self, text, expected_keys=None):
         self.text = text
         self.expected_keys = expected_keys
+        self.json_data = None
+        self.inspection_data = None
 
-    def extract_and_parse_json(self) -> Tuple[Dict[str, Any], Dict[str, Any]]:
-        try:
-            json_str = self.extract_json_str()
-            parsed_json = json.loads(json_str)
-            inspection_data = self.inspect_parsed_json(parsed_json)
-            return parsed_json, inspection_data
-        except (ValueError, KeyError) as e:
-            return {}, {"error": str(e)}
-
-    def extract_json_str(self) -> str:
-        start_index = self.text.find("{")
-        end_index = self.text.rfind("}") + 1
-        return self.text[start_index:end_index]
-
-    def inspect_parsed_json(self, parsed_json: Dict[str, Any]) -> Dict[str, Any]:
-        inspection_data: Dict[str, Any] = {}
-        for key in self.expected_keys:
-            if key not in parsed_json:
-                inspection_data[f"missing_{key}"] = True
-            else:
-                inspection_data[f"has_{key}"] = True
-        return inspection_data
\ No newline at end of file
+    def extract_and_parse_json(self):
+        brace_count = 0
+        json_start = -1
+        json_end = -1
+
+        for i, char in enumerate(self.text):
+            if char == '{':
+                if brace_count == 0:
+                    json_start = i
+                brace_count += 1
+            elif char == '}':
+                brace_count -= 1
+                if brace_count == 0:
+                    json_end = i + 1
+                    break
+
+        if json_start != -1 and json_end != -1:
+            json_str = self.text[json_start:json_end]
+            try:
+                self.json_data = json.loads(json_str)
+                self.inspection_data = self.generate_inspection_data()
+                return self.json_data, self.inspection_data
+            except json.JSONDecodeError as e:
+                print(f"Error decoding JSON: {e}")
+                return None, None
+        else:
+            print("No JSON object found in the text")
+            return None, None
+
+    def generate_inspection_data(self):
+        inspection_data = {}
+        keys = list(self.json_data.keys())
+        values_presence = {key: self.json_data[key] is not None for key in keys}
+
+        inspection_data['number_of_keys'] = len(keys)
+        inspection_data['keys'] = keys
+        inspection_data['values_presence'] = values_presence
+
+        if self.expected_keys:
+            inspection_data['keys_match'] = set(keys) == set(self.expected_keys)
+
+        return inspection_data
+
+    def check_inspection_data(self, expected_data):
+        deviations = {}
+        is_correct = True
+
+        # Compare number of keys
+        if self.inspection_data['number_of_keys'] != expected_data['number_of_keys']:
+            deviations['number_of_keys'] = self.inspection_data['number_of_keys']
+            is_correct = False
+
+        # Compare keys list
+        if set(self.inspection_data['keys']) != set(expected_data['keys']):
+            deviations['keys'] = self.inspection_data['keys']
+            is_correct = False
+
+        # Compare values presence
+        values_presence_deviation = {
+            key: self.inspection_data['values_presence'][key] != expected_data['values_presence'][key]
+            for key in expected_data['values_presence']
+            if self.inspection_data['values_presence'][key] != expected_data['values_presence'][key]
+        }
+
+        if values_presence_deviation:
+            deviations['values_presence'] = values_presence_deviation
+            is_correct = False
+
+        # Compare keys match
+        if 'keys_match' in self.inspection_data and self.inspection_data['keys_match'] != expected_data['keys_match']:
+            deviations['keys_match'] = self.inspection_data['keys_match']
+            is_correct = False
+
+        return is_correct, deviations
\ No newline at end of file

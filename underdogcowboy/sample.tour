{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Making an agent in package",
  "steps": [
    {
      "file": "underdogcowboy/core/specialized_agents.py",
      "description": "We need to place the reference to the new agent here as an import",
      "line": 5,
      "contents": "import os\nfrom underdogcowboy.core.specializedagents.commit_promo_agent import CommitPromoAgent\nfrom underdogcowboy.core.specializedagents.type_setter_agent import TypeSetterAgent\nfrom underdogcowboy.core.specializedagents.assessment_tester import AssessmentTestAgent\n\n\n\nSPECIALIZED_AGENTS = {\n    \"commit_promo\": CommitPromoAgent,\n    \"type_maker\": TypeSetterAgent,\n    \"assessment_tester\" : AssessmentTestAgent,\n    # Add more mappings here for other specialized agents\n}"
    },
    {
      "file": "underdogcowboy/core/specialized_agents.py",
      "description": "We have to make a reference in the SPECIALIZED_AGENTS. ",
      "line": 12,
      "contents": "import os\nfrom underdogcowboy.core.specializedagents.commit_promo_agent import CommitPromoAgent\nfrom underdogcowboy.core.specializedagents.type_setter_agent import TypeSetterAgent\nfrom underdogcowboy.core.specializedagents.assessment_tester import AssessmentTestAgent\n\n\n\nSPECIALIZED_AGENTS = {\n    \"commit_promo\": CommitPromoAgent,\n    \"type_maker\": TypeSetterAgent,\n    \"assessment_tester\" : AssessmentTestAgent,\n    # Add more mappings here for other specialized agents\n}"
    },
    {
      "file": "underdogcowboy/agents/commit_agents/__init_.py",
      "description": "This folder contains a json file with the dialog of the agent",
      "line": 1,
      "contents": ""
    },
    {
      "file": "underdogcowboy/__init__.py",
      "description": "In this __init__ we have the agent factory that loads the agents that we defined in the SPECIALIZED_AGENTS before",
      "line": 76,
      "contents": "\n\"\"\"\nUnderdog Cowboy Agent System Initialization\n\nThis __init__.py file serves as the entry point for the Underdog Cowboy agent system.\nIt provides dynamic loading and initialization of various agent types, including\nboth pre-defined and user-defined agents.\n\nKey components:\n- Agent class: Represents an agent with associated content loaded from a JSON file.\n- agent_factory: Creates appropriate Agent instances based on the filename.\n- load_agents: Dynamically loads agent configurations from JSON files.\n- Specialized agents: Imported from core.specialized_agents.\n\nThe module performs the following actions:\n1. Imports necessary modules and components.\n2. Defines the Agent class and related functions.\n3. Dynamically loads agents from both the package directory and user directory.\n4. Adds loaded agents to the current module's namespace.\n5. Updates __all__ to include core components and dynamically loaded agent names.\n\nThis structure allows for easy extension of the agent system, supporting both\nbuilt-in agents and user-defined agents. User-defined agents take precedence\nover package agents with the same identifier.\n\nNote: \nThe actual agent instances are dynamically added to this module's namespace,\nallowing direct access to them after import.\n\"\"\"\n\n\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\nlogger = logging.getLogger(__name__)\n\nimport os\nimport json\nfrom pathlib import Path \n\nlogger.debug(\"Basic imports completed\")\n\nfrom .core.config_manager import LLMConfigManager\nfrom .core.dialog_manager import DialogManager, AgentDialogManager\nfrom .core.timeline_editor import Timeline, CommandProcessor\nfrom .core.model import ModelManager, ModelRequestException, ConfigurableModel, ClaudeAIModel, VertexAIModel\nfrom .core.intervention import InterventionManager\nfrom .core.extractor import JSONExtractor\nfrom .core.agent import Agent\n\n\n\n# moved to new file, less clutering in the __init__.py\nfrom .core.specialized_agents import SPECIALIZED_AGENTS\n\ndef agent_factory(filename, package, is_user_defined=False):\n    \"\"\"\n    Creates an appropriate Agent instance based on the filename.\n\n    This factory function determines the type of agent to create based on the\n    filename. If the agent ID (derived from the filename) matches a key in\n    SPECIALIZED_AGENTS, it creates an instance of the corresponding specialized\n    agent class. Otherwise, it creates a standard Agent instance.\n\n    Args:\n        filename (str): The name of the JSON file containing the agent configuration.\n        package (str): The package or directory where the agent file is located.\n        is_user_defined (bool, optional): Indicates whether the agent is user-defined.\n            Defaults to False.\n\n    Returns:\n        Agent: An instance of either a specialized Agent subclass or the base Agent class.\n    \"\"\"\n    logger.debug(f\"Creating agent for {filename}\")\n    agent_id = os.path.splitext(filename)[0]\n    \n    if agent_id in SPECIALIZED_AGENTS:\n        return SPECIALIZED_AGENTS[agent_id](filename, package, is_user_defined)\n    \n    return Agent(filename, package, is_user_defined)\n\ndef load_agents(package='underdogcowboy.agents'):\n    \"\"\"\n    Dynamically loads agent configurations from JSON files in the specified package and user directory.\n\n    This function searches for JSON files in the given package directory\n    and recursively in the user's .underdogcowboy/agents directory. It creates Agent instances for\n    each found JSON file, with user-defined agents taking precedence over package agents.\n\n    Args:\n        package (str, optional): The base package to search for agent configurations. \n            Defaults to 'underdogcowboy.agents'.\n\n    Returns:\n        dict: A dictionary of Agent instances, keyed by their identifiers.\n    \"\"\"\n    logger.debug(f\"Loading agents from package: {package}\")\n    agents = {}\n    \n    def load_agents_recursive(directory, is_user_defined=False):\n        \"\"\"\n        Recursively loads agent configurations from JSON files in the given directory.\n\n        This inner function walks through the directory tree, creating Agent instances\n        for each JSON file found. It uses the agent_factory function to create the\n        appropriate type of Agent based on the filename.\n\n        Args:\n            directory (str): The directory to search for agent configuration files.\n            is_user_defined (bool, optional): Indicates whether the agents in this\n                directory are user-defined. Defaults to False.\n        \"\"\"        \n        for root, _, files in os.walk(directory):\n            for filename in files:\n                if filename.endswith('.json'):\n                    agent = agent_factory(filename, root, is_user_defined)\n                    agents[agent.id] = agent\n    \n    # Load from package directory\n    package_path = os.path.dirname(__file__)\n    load_agents_recursive(package_path)\n    \n    # Load from user directory, overriding package agents if necessary\n    user_dir = Path.home() / \".underdogcowboy\" / \"agents\"\n    if user_dir.exists():\n        load_agents_recursive(str(user_dir), is_user_defined=True)\n    \n    return agents\n\n\n# Dynamically load agents\nlogger.debug(\"About to load agents\")\nagents = load_agents()\nlogger.debug(f\"Loaded {len(agents)} agents\")\n\n# Add loaded agents to the current module's namespace\nlogger.debug(\"Adding agents to namespace\")\nfor agent_id, agent in agents.items():\n    logger.debug(f\"Adding agent {agent_id} to namespace\")\n    try:\n        globals()[agent_id] = agent\n        logger.debug(f\"Successfully added {agent_id}\")\n    except Exception as e:\n        logger.error(f\"Error adding agent {agent_id} to namespace: {str(e)}\")\n        import traceback\n        traceback.print_exc()\n\nlogger.debug(\"Finished adding agents to namespace\")\n\n\n# Create an instance of AgentDialogManager\nagent_dialog_manager = AgentDialogManager([])\n# Add it to the global namespace\nglobals()['adm'] = agent_dialog_manager\n\n# Update __all__ to include the agent names\nlogger.debug(\"Updating __all__\")\n__all__ = [\n    'JSONExtractor', 'ClaudeAIModel', 'CommandProcessor', 'ConfigurableModel', 'DialogManager', 'AgentDialogManager', \n    'InterventionManager', 'LLMConfigManager', 'ModelManager', 'ModelRequestException', 'Timeline', 'VertexAIModel',\n    'Agent', 'adm',\n]\n__all__.extend(agents.keys())\nlogger.debug(\"Finished updating __all__\")\n\nlogger.debug(\"__init__.py execution completed\")"
    }
  ]
}